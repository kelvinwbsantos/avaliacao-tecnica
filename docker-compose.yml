services:
  # --- BANCO DE DADOS POSTGRES ---
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- BACKEND NESTJS ---
  backend:
    build:
      context: ./../back-nest-avaliacao-tecnica-1
      dockerfile: Dockerfile.dev
    container_name: nestjs_backend
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      DB_TYPE: ${DB_TYPE}
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      PORT: ${BACKEND_PORT}
      NODE_ENV: ${NODE_ENV}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "${BACKEND_PORT}:3000"
    volumes:
      - ./../back-nest-avaliacao-tecnica-1:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # --- FRONTEND ANGULAR ---
  frontend:
    build:
      context: ./../front-angular-avaliacao-tecnica-1
      dockerfile: Dockerfile.dev
    container_name: angular_frontend
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      API_URL: http://localhost:${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:4200"
    volumes:
      - ./../front-angular-avaliacao-tecnica-1:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

# --- GERENCIAMENTO DE VOLUMES ---
volumes:
  pgdata:

networks:
  app-network:
    driver: bridge